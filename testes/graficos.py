import matplotlib.pyplot as plt
import numpy as np

data_reno20 = [
   [474.4994168142331, 474.4540003374449, 474.40292275956904, 474.36757082403176, 474.349328415083, 474.3249034922313, 474.3111821109619, 474.30015110467554, 474.2623400177135, 474.1583022720481],
   [168.43658442548264, 167.97106759826906, 167.78881795587014, 167.4443282063101, 167.10045793421892, 167.01512740049813, 167.01211526385933, 166.95557214451364, 167.0302023803315, 166.56264905798176, 166.7316826576961, 166.54489134623557, 166.73222117682417, 166.4863475678332, 166.21086505633582, 166.47904345940614, 166.38325046925954, 167.45140062808008, 166.0816791393185, 165.93180099666506, 165.9729987543641, 165.96643160965314, 165.750200497523, 165.77095170214002, 165.67309834654307, 165.94978566987305, 165.5695344787043, 165.7614806856002, 165.53926519227795, 164.49419202873804],
   [101.1016251367276, 100.41808507804791, 100.17935251879418, 99.71998174444086, 100.26442254675867, 99.60592051849221, 99.28324982982097, 99.26084762637831, 99.29591438219842, 99.65193890437189, 99.12651052498337, 99.09805834922876, 99.49545507613085, 98.9024565977599, 98.89090725859283, 98.89672508576774, 98.9317454440778, 98.90258049274861, 98.9211685988189, 98.82532018919875, 98.81668934193345, 98.91953653658558, 98.75146845787575, 98.67081839568006, 98.76492420366725, 98.75653336207864, 98.75042981480597, 99.17150056755047, 98.61365018702928, 98.62640084943077, 99.11792020329801, 98.61845414136587, 98.63700547492829, 98.68629211517693, 99.07721560740221, 99.03676971335398, 98.48118705692235, 98.55630303042827, 98.50794139570927, 99.8854527464308, 99.88062746260019, 98.48501245789288, 99.86426438834468, 98.4144753016986, 97.48310474990261, 97.7226378341659, 97.21395595889975, 96.97369352458153, 96.70964119703476, 96.65170941382667]
]
data_reno50 =[
    [501.50281231840967, 500.7309300238831, 499.2382654047219, 498.3305689757367, 498.30622116908194, 498.11012402213106, 497.9266507951715, 497.5513563214236, 497.46971494244747, 495.4701359613629],
    [166.73804556113004, 166.65679261951402, 166.63315921839677, 166.6388066446291, 166.41696941224288, 166.40429704776048, 166.25577433345939, 166.24835923038773, 166.02322812297217, 166.0401730326053, 165.75124903258228, 165.7787257372129, 165.6966348898352, 165.57858703859023, 165.58506613442336, 165.56851817566707, 165.5542366176739, 165.48700489624485, 165.49449979716115, 165.36100088682298, 165.13412493763158, 165.16882993756823, 164.90537411854527, 164.68747797719584, 164.6993123037714, 164.44436578962254, 164.51880853019517, 164.41972114137116, 164.24241986722825, 164.27859823890074],
    [98.5242859071005, 98.11879977728549, 98.01464787053605, 97.91133163629279, 97.88871269282785, 97.71402813158103, 97.76354604880066, 97.72736226086344, 97.58618197860733, 97.60565052980876, 97.61243231585927, 97.60231814592612, 97.57921154139879, 97.56173734781692, 97.57007348845795, 97.53011210300447, 97.55996729645061, 97.48791438229938, 97.3997009508428, 97.41092795881117, 97.36920192246907, 97.33363320811425, 97.31548564280091, 97.24957284198047, 97.20288905154995, 97.19599142937099, 97.1668281844276, 97.15295536740607, 97.16090651594345, 97.14089677713697, 
97.13355076222682, 97.05037429923176, 97.05667434875076, 97.07701696988205, 97.00671729540376, 96.99403630957731, 96.97287734577804, 96.99884669774099, 96.98007579095567, 96.9335474099156, 96.82970184835547, 96.79589490762038, 96.84462442125358, 96.78818961172739, 96.73530229393897, 96.73623681828046, 96.66092563613208, 96.64384399324722, 96.6026257291128, 96.4315959589272]
]

data_cubic20 = [
    [550.225919871046, 549.9866428420115, 549.939660916403, 549.8523028498678, 549.5546364438403, 549.6173525257761, 549.3355906188524, 549.2693914608946, 549.2650293260523, 548.7598349818699],
    [190.9052642325214, 189.78403395655047, 189.81588170064447, 188.85485727761505, 188.67803529089397, 188.30146045620367, 188.15054116088913, 188.06665414090884, 188.0521694754468, 187.92904466332493, 187.82764129176232, 187.79431568425053, 187.6338785180214, 187.18886257273343, 187.42217757375462, 186.593969913407, 186.65879851466707, 186.5087434955096, 186.1426912693559, 186.22803397055878, 186.47069343376094, 186.2822690270023, 186.1994528581708, 185.99747093480485, 186.16672102350086, 185.71629152727894, 185.78743527397097, 185.99136117463044, 185.73347387345277, 185.9205472988504],
    [113.85231493559267, 113.42908194934725, 112.88707224331402, 112.75958393434004, 112.5655722154235, 113.17442710303162, 112.55411407156745, 112.98600639109488, 112.27673743881887, 112.77630144291432, 112.02554769501906, 111.93450684287629, 111.90085364014281, 111.92211837354353, 111.56825034925642, 111.58200436259862, 111.49005548246866, 112.1074099380679, 112.0054587312569, 
111.31051975716903, 111.91956570635556, 111.29122883307951, 111.20248257303045, 111.1392879283689, 110.971184336258, 111.59614422382371, 110.82507491657937, 110.23550278719951, 109.68167703810371, 109.53141554061384, 109.44036505527195, 109.26904407396128, 108.98459614579397, 108.87795683348305, 108.89729966425465, 109.46158164993582, 110.62030453957945, 110.51524375703737, 110.43054285962461, 110.30769971289513, 108.96618987553146, 108.83310624205795, 109.98154048854707, 105.39770211014493, 105.12240953479899, 105.03445779445829, 104.91021775044815, 104.84573587052067, 104.7396562683876, 104.53759029933623]
]
data_cubic50 = [
    [547.7150161700094, 546.8483139730877, 546.6807982501601, 546.6114529321766, 546.0210300425092, 545.7967145532484, 544.9699944722493, 545.0318164586878, 544.4905039448466, 544.5810358474242],
    [179.49306049636544, 178.98720995916523, 178.6175572677555, 178.6229136659868, 178.31128070425, 178.32048822742797, 178.32469889915194, 178.15969445360665, 178.10567171492258, 177.791457434022, 177.65718083958598, 177.6051151244874, 177.60154145450937, 177.61660868724294, 177.52575169516084, 177.37737283524385, 177.35055798412006, 177.19071852321616, 177.02608154805017, 176.87644847059178, 176.87929138270624, 176.29623284771645, 176.24874117532966, 176.17726241038122, 176.18239987463824, 176.03364952892608, 176.5831443276297, 175.90173446680618, 176.3581073349187, 175.6126155767862],
    [104.12673005836801, 104.09597524032758, 104.08531476457729, 104.11579150778837, 104.03355488513718, 103.84274510560525, 103.87021571413116, 103.82318366534624, 103.83885378803471, 103.79382047883051, 103.78433206651432, 103.69459714470699, 103.70307948984677, 103.68028465022607, 103.66516356570214, 103.57429826106134, 103.56684404587806, 103.52264596021354, 103.51709990639799, 103.7322934914587, 103.50824239349635, 103.48803071020359, 103.62778716649997, 103.55459637985072, 103.3203189202633, 103.29845180450484, 103.26954598289282, 103.2523905917138, 103.18544103200196, 103.17423205110761, 103.14133552963597, 103.35912986850315, 103.117426264479, 102.99289423807302, 102.93746918778872, 102.95114600328357, 103.12791286347557, 102.844615166305, 102.84387647416295, 103.03932272953786, 103.03535455267563, 102.7481246598428, 102.74044186143858, 102.64698917839115, 102.83720710338503, 102.49872781046852, 102.4968407154645, 102.41731103145662, 102.41476453085883, 102.35732628715799]
]

def calcular_media(vetor):
    if not vetor:
        raise ValueError("O vetor não pode estar vazio.")

    soma = sum(vetor)
    media = soma / len(vetor)
    return media

def data_extract(data):
    data_plot = []
    for data in data:
        mean = calcular_media(data)
        data_plot.append(mean)
    return data_plot
# Dados para o gráfico
categorias = ['10', '30', '50']

largura = 0.2  # Largura das barras

#valores1 = data_extract(data_reno20)
#valores2 = data_extract(data_reno50)

valores1 = data_extract(data_cubic20)
valores2 = data_extract(data_cubic50)

# Definir posições das barras
posicoes1 = np.arange(len(categorias))
posicoes2 = posicoes1 + largura

plt.bar(posicoes1, valores1, width=largura, label='20mb')
plt.bar(posicoes2, valores2, width=largura, label='50mb')
#Criar o gráfico de coluna
#plt.bar(categorias, data_plot)

#Adicionar rótulos e título
plt.xlabel('Clientes')
plt.ylabel('Taxa media de transferencia em KB/s')
plt.title('Comparativo Cubic')

# Adicionar legendas
plt.legend()

# Ajustar as posições do eixo x para mostrar as categorias
plt.xticks(posicoes1 + largura/2, categorias)

# Mostrar o gráfico
plt.show()